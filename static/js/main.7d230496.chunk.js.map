{"version":3,"sources":["redux/ActionType.ts","components/SearchResults.tsx","redux/actions.ts","components/SpotlightSearch.tsx","services/service.ts","redux/reducer.ts","redux/store.ts","App.tsx","index.tsx"],"names":["ActionType","SearchResults","onChangeSelectItemIndex","useSelector","state","searchCategoriedResults","searchResultsArray","selectedItemIndex","className","Object","entries","map","key","value","icon","name","indexInArray","isSelected","onClick","alt","src","process","setSelectedItemIndex","index","type","SET_SELECTED_ITEM_INDEX","SpotlightSearch","useState","inputText","setInputText","dispatch","useDispatch","useEffect","handleKeyDown","e","preventDefault","length","document","addEventListener","removeEventListener","size","placeholder","onChange","target","results","query","searchResults","count","data","category","payload","filter","toLowerCase","includes","handleSearch","resultsInArray","values","push","SET_SEARCH_RESULTS","setSearchResults","initialState","store","createStore","action","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7d230496.chunk.js","sourcesContent":["export enum ActionType {\n  SET_SELECTED_ITEM_INDEX = 'SET_SELECTED_ITEM_INDEX',\n  SET_SEARCH_RESULTS = 'SET_SEARCH_RESULTS'\n}","import React, { useCallback, useState, useEffect } from 'react';\nimport { SearchResultType, SearchResultListType } from '../services/service';\nimport '../css/SearchResults.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { IState } from '../redux/reducer';\n\ninterface Props {\n  onChangeSelectItemIndex: (index: number) => void\n}\n\nconst SearchResults: React.FC<Props> = ({ onChangeSelectItemIndex }) => {\n  const publicPath = process.env.PUBLIC_URL;\n\n  const { searchCategoriedResults, searchResultsArray, selectedItemIndex }: {\n    searchCategoriedResults: SearchResultListType,\n    searchResultsArray: Array<SearchResultType>\n    selectedItemIndex: number | null\n  } = useSelector((state: IState) => state);\n\n  const onClickListItem = (index: number): void => onChangeSelectItemIndex(index);\n\n\n  return (\n    <div className=\"spotlight-search-results\">\n      <div className=\"search-result-list\">\n        {\n          Object.entries(searchCategoriedResults).map(([key, value]) => (\n            <section key={key}>\n              <h4>{key}</h4>\n              {value.map(({ icon, name, indexInArray }: SearchResultType) => {\n                const isSelected = selectedItemIndex != null && indexInArray === selectedItemIndex;\n                return <div key={indexInArray} className={`search-result-list-item${isSelected ? ' selected' : ''}`}\n                  onClick={() => onClickListItem(indexInArray ?? 0)}>\n                  <img alt=\"\" className=\"search-result-list-item-icon\" src={`${publicPath}/icons/${icon}`} />\n                  <span>{name}</span>\n                </div>;\n              }\n              )}\n            </section>))\n        }\n\n      </div>\n      <div className=\"search-result-detail\">\n        {\n          selectedItemIndex != null && searchResultsArray[selectedItemIndex] &&\n          <>\n            <img alt=\"\"\n              className=\"search-result-detail-icon\"\n              src={`${publicPath}/icons/${searchResultsArray[selectedItemIndex].icon}`} />\n            <span>{searchResultsArray[selectedItemIndex].name}</span>\n          </>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default SearchResults;","import { SearchResultListType, SearchResultType } from \"../services/service\";\nimport { ActionType } from \"./ActionType\";\n\n\nexport const setSearchResults = (results: SearchResultListType) => {\n  const resultsInArray: Array<SearchResultType> = [];\n  for (const value of Object.values(results)) {\n    resultsInArray.push(...value);\n  }\n  \n  return {\n    type: ActionType.SET_SEARCH_RESULTS,\n    results,\n    resultsInArray\n  };\n};\n\nexport const setSelectedItemIndex = (index: number) => ({\n  type: ActionType.SET_SELECTED_ITEM_INDEX,\n  index\n});\n\n","import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport '../css/SpotlightSearch.css';\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport { SearchResultListType, handleSearch, SearchResultType } from '../services/service';\nimport SearchResults from './SearchResults';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setSearchResults, setSelectedItemIndex } from '../redux/actions';\nimport { IState } from '../redux/reducer';\n\nconst SpotlightSearch: React.FC = () => {\n\n  const [inputText, setInputText] = useState<string>('');\n\n  const dispatch = useDispatch();\n\n  const { searchCategoriedResults, searchResultsArray, selectedItemIndex }: {\n    searchCategoriedResults: SearchResultListType,\n    searchResultsArray: Array<SearchResultType>\n    selectedItemIndex: number | null\n  } = useSelector((state: IState) => state);\n\n  const publicPath = process.env.PUBLIC_URL;\n\n  // useEffect(() => {\n  //   const timer = setTimeout(() => {\n  //     console.log(count);\n  //     if (count > 0) {\n  //       setCount(count - 1);\n  //     } else if (count == 0) {\n  //       setInputText('');\n  //       setSelectedItemIndex(null);\n  //       setSearchResults([]);\n  //     }\n  //   }, 1000);\n  //   return () => clearTimeout(timer);\n  // }, [count]);\n\n\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'ArrowUp') {\n        e.preventDefault();\n      }\n      if (e.key === 'ArrowUp' && selectedItemIndex != null && selectedItemIndex - 1 >= 0) {\n        dispatch(setSelectedItemIndex(selectedItemIndex - 1));\n        \n      } else if (e.key === 'ArrowDown' && selectedItemIndex != null && selectedItemIndex + 1 < searchResultsArray.length) {\n        dispatch(setSelectedItemIndex(selectedItemIndex + 1));\n      }\n    }\n    document.addEventListener(\"keydown\", handleKeyDown)\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown)\n    }\n  }, [dispatch, selectedItemIndex, searchResultsArray.length]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const value = e.target.value;\n    setInputText(value);\n    const results = handleSearch(value);\n    dispatch(setSearchResults(results));\n  }\n\n  const onChangeSelectItemIndex = (index: number) => {\n    if (searchResultsArray[index] != null) {\n      dispatch(setSelectedItemIndex(index));\n    }\n  }\n\n  return (\n    <div className=\"spotlight\">\n      <div className=\"spotlight-search-bar\">\n        <div className=\"search-icon\">\n          <AiOutlineSearch size=\"2.5rem\" />\n        </div>\n        <input placeholder=\"Spotlight Search\" value={inputText} onChange={handleChange} />\n        {/* {count != 0 && <span>{count}</span>} */}\n        {\n          selectedItemIndex != null && searchResultsArray[selectedItemIndex] != null &&\n          <img alt=\"\" className=\"search-bar-selected-item-icon\" src={`${publicPath}/icons/${searchResultsArray[selectedItemIndex].icon}`} />\n        }\n      </div>\n      {searchResultsArray.length > 0 && <SearchResults onChangeSelectItemIndex={onChangeSelectItemIndex} />}\n    </div>\n  )\n};\n\nexport default SpotlightSearch;","import data from '../mockData1.json';\n\n\nexport type SearchResultListType = {\n  [key: string]: Array<SearchResultType>\n};\n// export type SearchResultListType = Array<SearchResultType>;\n\nexport type SearchResultType = {\n  icon?: string,\n  name: string,\n  indexInArray?: number\n}\n\nexport const handleSearch = (query: string) => {\n  if (!query) {\n    return {};\n  }\n  // console.log(query);\n  // const res = Object.assign({}, ...Object.entries(data).map(([key, arr]) => ({\n  //   [key]: arr.filter(({ name }: SearchResultType): boolean =>\n  //     name.toLowerCase().includes(query.toLowerCase()))\n  // })));\n  const searchResults: SearchResultListType = {};\n  let count = 0;\n  for (let [category, arr] of Object.entries(data)) {\n    const payload: Array<SearchResultType> = arr.filter(({ name }: SearchResultType): boolean =>\n      name.toLowerCase().includes(query.toLowerCase()));\n\n    if (payload.length > 0) {\n      for (let item of payload) {\n        item.indexInArray = count++;\n      }\n      searchResults[category] = payload;\n    }\n  }\n  return searchResults;\n};","import { SearchResultListType, SearchResultType } from \"../services/service\";\nimport { ActionType } from \"./ActionType\";\n\n\nexport interface IState {\n  searchCategoriedResults: SearchResultListType,\n  searchResultsArray: Array<SearchResultType>,\n  selectedItemIndex: number | null,\n}\n\nconst initialState: IState = {\n  searchCategoriedResults: {},\n  searchResultsArray: [],\n  selectedItemIndex: null\n}\n\nexport const rootReducer = (state: IState = initialState, action: any) => {\n  switch (action.type) {\n    case ActionType.SET_SEARCH_RESULTS:\n      return {\n        ...state,\n        searchCategoriedResults: action.results,\n        searchResultsArray: action.resultsInArray,\n        selectedItemIndex: action.resultsInArray.length > 0 ? 0 : null\n      }\n    case ActionType.SET_SELECTED_ITEM_INDEX:\n      return {\n        ...state,\n        selectedItemIndex: action.index\n      }\n    default:\n      return state;\n  }\n};\n","import { createStore } from 'redux';\n\nimport {rootReducer} from './reducer';\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from 'react';\nimport './App.css';\nimport SpotlightSearch from './components/SpotlightSearch';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <SpotlightSearch />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}